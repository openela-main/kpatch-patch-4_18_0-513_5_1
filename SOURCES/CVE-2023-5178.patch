From 0815be753121d745a7059e9010b3ae8687629b0a Mon Sep 17 00:00:00 2001
From: Ryan Sullivan <rysulliv@redhat.com>
Date: Mon, 20 Nov 2023 10:15:04 -0500
Subject: [KPATCH CVE-2023-5178] kpatch fixes for CVE-2023-5178

Kernels:
4.18.0-513.5.1.el8_9


Kpatch-MR: https://gitlab.com/redhat/prdsc/rhel/src/kpatch/rhel-8/-/merge_requests/172
Approved-by: Joe Lawrence (@joe.lawrence)
Changes since last build:
[x86_64]:
tcp.o: changed function: nvmet_tcp_handle_icreq
tcp.o: changed function: nvmet_tcp_socket_error
tun.o: changed function: tun_get_user
verifier.o: changed function: __mark_chain_precision

[ppc64le]:
tcp.o: changed function: nvmet_tcp_handle_icreq
tcp.o: changed function: nvmet_tcp_io_work
tcp.o: changed function: nvmet_tcp_try_send.constprop.6
tun.o: changed function: tun_get_user
verifier.o: changed function: __mark_chain_precision

---------------------------

Modifications: none

commit 5bfd463c9e7d4dd8105c141bc8085e3dc7419a3a
Author: John Meneghini <jmeneghi@redhat.com>
Date:   Fri Oct 13 11:18:19 2023 -0400

    nvmet-tcp: Fix a possible UAF in queue intialization setup

    JIRA: https://issues.redhat.com/browse/RHEL-11507
    CVE: CVE-2023-5178
    Y-Commit: cc1d1b09fe8887b2372e5df8b3fb16ad504c3b25

    O-JIRA: https://issues.redhat.com/browse/RHEL-11509
    O-CVE: CVE-2023-5178

    O-JIRA: https://issues.redhat.com/browse/RHEL-11527
    O-CVE: CVE-2023-5178

    Upstream Status: git://git.infradead.org/nvme.git

    From Alon:
    "Due to a logical bug in the NVMe-oF/TCP subsystem in the Linux kernel,
    a malicious user can cause a UAF and a double free, which may lead to
    RCE (may also lead to an LPE in case the attacker already has local
    privileges)."

    Hence, when a queue initialization fails after the ahash requests are
    allocated, it is guaranteed that the queue removal async work will be
    called, hence leave the deallocation to the queue removal.

    Also, be extra careful not to continue processing the socket, so set
    queue rcv_state to NVMET_TCP_RECV_ERR upon a socket error.

    Cc: stable@vger.kernel.org
    Reported-by: Alon Zahavi <zahavi.alon@gmail.com>
    Tested-by: Alon Zahavi <zahavi.alon@gmail.com>
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Chaitanya Kulkarni <kch@nvidia.com>
    Signed-off-by: Keith Busch <kbusch@kernel.org>
    (cherry picked from commit d920abd1e7c4884f9ecd0749d1921b7ab19ddfbd)
    Signed-off-by: John Meneghini <jmeneghi@redhat.com>
    Signed-off-by: Patrick Talbert <ptalbert@redhat.com>

Signed-off-by: Ryan Sullivan <rysulliv@redhat.com>
---
 drivers/nvme/target/tcp.c | 7 ++-----
 1 file changed, 2 insertions(+), 5 deletions(-)

diff --git a/drivers/nvme/target/tcp.c b/drivers/nvme/target/tcp.c
index 17d688931e62..9184d9854037 100644
--- a/drivers/nvme/target/tcp.c
+++ b/drivers/nvme/target/tcp.c
@@ -363,6 +363,7 @@ static void nvmet_tcp_fatal_error(struct nvmet_tcp_queue *queue)
 
 static void nvmet_tcp_socket_error(struct nvmet_tcp_queue *queue, int status)
 {
+	queue->rcv_state = NVMET_TCP_RECV_ERR;
 	if (status == -EPIPE || status == -ECONNRESET)
 		kernel_sock_shutdown(queue->sock, SHUT_RDWR);
 	else
@@ -889,15 +890,11 @@ static int nvmet_tcp_handle_icreq(struct nvmet_tcp_queue *queue)
 	iov.iov_len = sizeof(*icresp);
 	ret = kernel_sendmsg(queue->sock, &msg, &iov, 1, iov.iov_len);
 	if (ret < 0)
-		goto free_crypto;
+		return ret; /* queue removal will cleanup */
 
 	queue->state = NVMET_TCP_Q_LIVE;
 	nvmet_prepare_receive_pdu(queue);
 	return 0;
-free_crypto:
-	if (queue->hdr_digest || queue->data_digest)
-		nvmet_tcp_free_crypto(queue);
-	return ret;
 }
 
 static void nvmet_tcp_handle_req_failure(struct nvmet_tcp_queue *queue,
-- 
2.42.0


